{"version":3,"sources":["js/actions/index.js","js/components/PostsList.js","js/actions/types.js","js/components/PostNew.js","js/components/PostsShow.js","js/components/App.js","js/reducers/index.js","js/reducers/reducerPost.js","serviceWorker.js","index.js"],"names":["API_KEY","BASE_URL","PostList","renderPosts","_","map","_this","props","posts","post","react_default","a","createElement","react_router_dom","key","id","className","to","concat","title","this","fetchPosts","Fragment","React","Component","connect","state","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","fetch","sent","json","then","type","payload","stop","_x","apply","arguments","FIELDS","categories","content","PostNew","renderField","input","label","meta","touched","error","assign","autoComplete","rows","onSubmit","values","createPost","history","push","handleSubmit","Field","name","component","reduxForm","validate","errors","each","field","form","_ref2","_callee2","_context2","method","headers","Accept","Content-Type","body","JSON","stringify","_x2","PostsShow","onDeleteClick","match","params","deletePost","renderPost","onClick","fetchPost","ownProps","_ref3","_callee3","_context3","_x3","_ref4","_callee4","_context4","_x4","App","basename","react_router","path","exact","combineReducers","length","undefined","action","objectSpread","defineProperty","mapKeys","omit","formReducer","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","js_components_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5fcd927d.chunk.js","sourcesContent":["import {CREATE_POST, FETCH_POSTS, FETCH_POST} from \"./types\";\n\nconst API_KEY = '?key=HOUSTONWEGOTAPROBLEM12345';\nconst BASE_URL = 'https://reduxblog.herokuapp.com/api';\n\nexport const fetchPosts = () => async (dispatch) => {\n  const response = await fetch(`${BASE_URL}/posts${API_KEY}`);\n  response.json().then(\n    posts => {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: posts\n      });\n    });\n};\n\nexport const createPost = (values) => async (dispatch) => {\n  const response = await fetch(`${BASE_URL}/posts${API_KEY}`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(values)\n  });\n  response.json().then(post => {\n    dispatch({\n      type: CREATE_POST,\n      payload: post\n    });\n  });\n};\n\nexport const fetchPost = (id) => async (dispatch) => {\n  const response = await fetch(`${BASE_URL}/posts/${id}${API_KEY}`);\n  response.json().then(post => {\n    dispatch({\n      type: FETCH_POST,\n      payload: post\n    })\n  })\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  const response = await fetch(`${BASE_URL}/posts/${id}${API_KEY}`, {\n    method: 'DELETE'\n  });\n  response.json().then(post => {\n    dispatch({\n      type: FETCH_POST,\n      payload: post\n    });\n  })\n};","import _ from 'lodash'\nimport React from 'react';\nimport '../../style/components/App.css';\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport {fetchPosts} from \"../actions\";\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPosts()\n  }\n\n  renderPosts = () => {\n    return _.map(this.props.posts, post => {\n      return (\n        <Link key={post.id} className=\"list-group-item custom\" to={`/posts/${post.id}`}>\n          <li>\n            {post.title}\n          </li>\n        </Link>\n      )\n    })\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"row justify-content-between p-3\">\n          <h3>Posts List</h3>\n          <Link to={'/posts/new'} className=\"btn btn-primary\">\n            Add a Post\n          </Link>\n        </div>\n        <ul className=\"list-group\">\n          {this.renderPosts()}\n        </ul>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {posts: state.posts}\n};\n\nexport default connect(mapStateToProps, {fetchPosts})(PostList);\n\n\n","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const CREATE_POST = 'CREATE_POST';\nexport const FETCH_POST = 'FETCH_POST';\nexport const DELETE_POST = 'DELETE_POST';","import _ from 'lodash'\nimport React from 'react';\nimport {Field, reduxForm} from 'redux-form'\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {createPost} from \"../actions\";\n\nconst FIELDS = {\n  title: {},\n  categories: {},\n  content: {},\n};\n\nclass PostNew extends React.Component {\n  renderField = ({input, label, meta}) => {\n    const {touched, error} = meta;\n    const className = `form-control ${touched && error ? 'is-invalid' : ''}`;\n\n    return (\n      <div className=\"form-group\">\n        <label>{label}</label>\n        {label !== 'Content'\n          ? <input className={className} {...input} autoComplete={'off'}/>\n          : <textarea {...input} className={className} rows=\"5\"/>\n        }\n        {touched && error\n          ? <small className=\"text-danger\">{error}</small>\n          : null\n        }\n      </div>\n    )\n  };\n\n  onSubmit = (values) => {\n    this.props.createPost(values).then(() => {\n      this.props.history.push('/')\n    })\n  };\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"py-3 m-0\">Create Post</h3>\n        <div className=\"card p-4\">\n          <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n            <Field label=\"Title\" name=\"title\" component={this.renderField}/>\n            <Field label=\"Category\" name=\"categories\" component={this.renderField}/>\n            <Field label=\"Content\" name=\"content\" component={this.renderField}/>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            <Link className=\"btn btn-danger ml-3\" to={'/'}>Cancel</Link>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst validate = (values) => {\n  const errors = {};\n  _.each(FIELDS, (type, field) => {\n    if (!values[field]) {\n      errors[field] = `Enter any ${field}`\n    }\n  });\n  return errors;\n};\n\nexport default reduxForm({\n  validate,\n  form: 'PostNewForm'\n})(\n  connect(null, {createPost})(PostNew)\n);","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {fetchPost, deletePost} from \"../actions\";\nimport {Link} from \"react-router-dom\";\n\nclass PostsShow extends React.Component {\n  componentDidMount() {\n    if (!this.props.post) {\n      const {id} = this.props.match.params;\n      this.props.fetchPost(id);\n    }\n  }\n\n  onDeleteClick = () => {\n    const {id} = this.props.match.params;\n    this.props.deletePost(id).then(() => {\n      this.props.history.push('/')\n    })\n  };\n\n  renderPost = ({title, categories, content}) => {\n    return (\n      <div className=\"card mt-3\">\n        <div className=\"card-header text-center\">\n          <h3 className=\"m-0\">{title}</h3>\n        </div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{content}</p>\n        </div>\n        <div className=\"card-footer text-muted d-flex justify-content-between align-items-center\">\n          <div><span className=\"span-text-custom\">Category:</span> {categories}</div>\n          <button onClick={this.onDeleteClick} className=\"btn btn-danger\">Delete</button>\n        </div>\n      </div>\n    )\n  };\n\n  render() {\n    const arrow = '<---';\n    if (!this.props.post) {\n      return (\n        <div className=\"d-flex justify-content-center align-items-center h-100\">\n          <div className=\"loader\"/>\n        </div>\n      )\n    }\n    return (\n      <div className=\"pt-3\">\n        <div>\n          <Link className=\"arrow-back-main py-2\" to={'/'}><span className=\"arrow-back\">{arrow}</span>Back to list </Link>\n        </div>\n        {this.renderPost(this.props.post)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({posts}, ownProps) => {\n  return {post: posts[ownProps.match.params.id]}\n};\n\nexport default connect(mapStateToProps, {fetchPost, deletePost})(PostsShow);","import React from 'react';\nimport '../../style/components/App.css';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport PostList from \"./PostsList\";\nimport PostNew from \"./PostNew\";\nimport PostsShow from \"./PostsShow\";\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route path={'/'} exact component={PostList}/>\n          <Route path={'/posts/new'} exact component={PostNew}/>\n          <Route path={'/posts/:id'} exact component={PostsShow}/>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport {reducer as formReducer} from 'redux-form'\nimport PostReducer from './reducerPost';\n\nexport default combineReducers({\n  posts: PostReducer,\n  form: formReducer,\n});\n","import _ from 'lodash'\nimport {FETCH_POSTS, CREATE_POST, FETCH_POST, DELETE_POST} from \"../actions/types\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case FETCH_POST:\n      return {...state, [action.payload.id]: action.payload};\n    case FETCH_POSTS:\n      return _.mapKeys(action.payload, 'id');\n    case CREATE_POST:\n      return {...state, [action.payload.id]: action.payload};\n    case DELETE_POST:\n      return _.omit(state, action.payload);\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./js/components/App\";\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport reducers from './js/reducers'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}